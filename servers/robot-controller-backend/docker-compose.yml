version: '3.8'

services:
  # Robot Controller Backend
  robot-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: robot-controller-backend
    ports:
      - "8080:8080"  # Main API
      - "8081:8081"  # Movement WebSocket
      - "8090:8090"  # Sensor WebSocket
    environment:
      - ENVIRONMENT=production
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
      - /dev/i2c-1:/dev/i2c-1  # I2C device for hardware
    devices:
      - /dev/i2c-1:/dev/i2c-1
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - robot-network

  # Go Ultrasonic Sensor Service
  ultrasonic-service:
    build:
      context: ./sensors
      dockerfile: Dockerfile
    container_name: ultrasonic-service
    ports:
      - "8082:8082"
    environment:
      - ENVIRONMENT=production
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - robot-network

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: robot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - robot-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: robot-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
    depends_on:
      - robot-backend
      - ultrasonic-service
    restart: unless-stopped
    networks:
      - robot-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: robot-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - robot-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: robot-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - robot-network

  # Log aggregation with ELK Stack (optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: robot-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - robot-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: robot-logstash
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - robot-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: robot-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - robot-network

volumes:
  redis-data:
  prometheus-data:
  grafana-data:
  elasticsearch-data:

networks:
  robot-network:
    driver: bridge
