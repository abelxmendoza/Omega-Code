name: Backend CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
    paths:
      - 'servers/robot-controller-backend/**'
      - '.github/workflows/backend-ci-cd.yml'
  pull_request:
    branches: [ master, main ]
    paths:
      - 'servers/robot-controller-backend/**'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  GO_VERSION: '1.21'

jobs:
  # Python Backend Tests
  python-tests:
    name: Python Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./servers/robot-controller-backend
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y i2c-tools libi2c-dev
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio
      
      - name: Run Python tests
        run: |
          python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
        env:
          PYTHONPATH: ${{ github.workspace }}/servers/robot-controller-backend
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./servers/robot-controller-backend/coverage.xml
          flags: backend-python
          name: backend-python-coverage
          fail_ci_if_error: false

  # Go Backend Tests
  go-tests:
    name: Go Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./servers/robot-controller-backend
    
    strategy:
      matrix:
        go-version: ['1.20', '1.21', '1.22']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
      
      - name: Install Go dependencies
        run: go mod download
      
      - name: Run Go tests
        run: |
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./servers/robot-controller-backend/coverage.out
          flags: backend-go
          name: backend-go-coverage
          fail_ci_if_error: false

  # Lint and Code Quality
  lint-and-quality:
    name: Lint & Code Quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./servers/robot-controller-backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Install Python linting tools
        run: |
          pip install black flake8 isort mypy bandit
      
      - name: Install Go linting tools
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      
      - name: Run Python Black formatter check
        run: black --check --diff .
      
      - name: Run Python isort check
        run: isort --check-only --diff .
      
      - name: Run Python flake8 linter
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
      - name: Run Python mypy type checker
        run: mypy . --ignore-missing-imports
      
      - name: Run Python bandit security linter
        run: bandit -r . -f json -o bandit-report.json
      
      - name: Run Go linter
        run: golangci-lint run --timeout=5m
      
      - name: Upload bandit report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: bandit-security-report
          path: servers/robot-controller-backend/bandit-report.json
          retention-days: 30

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./servers/robot-controller-backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install safety semgrep
      
      - name: Run safety check
        run: safety check --json --output safety-report.json
      
      - name: Run Semgrep security scan
        run: |
          semgrep --config=auto --json --output=semgrep-report.json .
        continue-on-error: true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            servers/robot-controller-backend/safety-report.json
            servers/robot-controller-backend/semgrep-report.json
          retention-days: 30

  # Build Docker Images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [python-tests, go-tests, lint-and-quality]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/robot-controller-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./servers/robot-controller-backend
          file: ./servers/robot-controller-backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-docker
    defaults:
      run:
        working-directory: ./servers/robot-controller-backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-asyncio websockets
      
      - name: Start backend services
        run: |
          # Start WebSocket servers in background
          python movement/movement_ws_server.py &
          python sensors/line_tracking_ws_server.py &
          sleep 5
      
      - name: Run integration tests
        run: |
          python -m pytest tests/integration/ -v
        env:
          PYTHONPATH: ${{ github.workspace }}/servers/robot-controller-backend
      
      - name: Stop background services
        run: |
          pkill -f "movement_ws_server.py"
          pkill -f "line_tracking_ws_server.py"

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build-docker
    defaults:
      run:
        working-directory: ./servers/robot-controller-backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install performance testing tools
        run: |
          pip install locust pytest-benchmark
      
      - name: Run performance tests
        run: |
          python -m pytest tests/performance/ -v --benchmark-only
        env:
          PYTHONPATH: ${{ github.workspace }}/servers/robot-controller-backend
        continue-on-error: true

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker, integration-tests]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to staging server
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/robot-controller
            docker-compose pull
            docker-compose up -d --force-recreate
            docker system prune -f

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker, integration-tests, performance-tests]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to production server
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/robot-controller
            docker-compose pull
            docker-compose up -d --force-recreate
            docker system prune -f
      
      - name: Health check
        run: |
          sleep 30
          curl -f http://${{ secrets.PRODUCTION_HOST }}:8081/health || exit 1

  # Notify on completion
  notify:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
